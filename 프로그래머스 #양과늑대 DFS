#include <vector>
#include <algorithm>
#include <set>

using namespace std;

void dfs(vector<vector<int>>& graph, vector<int>& info, int sheep, int wolf, int current, vector<int> visitable, int& max_sheep) {
    // 현재 노드가 양이면 양 증가, 늑대면 늑대 증가
    if (info[current] == 0) sheep++;
    else wolf++;

    // 늑대가 양 이상이면 종료 (더 이상 탐색 불가)
    if (wolf >= sheep) return;

    // 최대 양 갱신
    max_sheep = max(max_sheep, sheep);

    // 방문 가능한 노드 목록 업데이트
    visitable.erase(find(visitable.begin(), visitable.end(), current));
    for (int next : graph[current]) {
        visitable.push_back(next);
    }

    // 다음 상태로 DFS
    for (int next : visitable) {
        dfs(graph, info, sheep, wolf, next, visitable, max_sheep);
    }
}

int solution(vector<int> info, vector<vector<int>> edges) {
    int n = info.size();
    vector<vector<int>> graph(n);

    // 트리 그래프 구성
    for (const auto& edge : edges) {
        int parent = edge[0];
        int child = edge[1];
        graph[parent].push_back(child);
    }

    // 최대 양을 기록할 변수
    int max_sheep = 0;

    // DFS 탐색 시작 (루트 노드 0에서 시작)
    dfs(graph, info, 0, 0, 0, {0}, max_sheep);

    return max_sheep;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n,m;
int arr[1000][1000];
bool visited[1000][1000];
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};

void BFS(int x, int y){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    arr[x][y]=0;
    
    while(!q.empty()){
        int a=q.front().first;
        int b=q.front().second;
        q.pop();
        
        for(int i=0; i<4; i++){
            int nx= a+dx[i];
            int ny= b+dy[i];
            
            if(nx<0||ny<0||nx>=n||ny>=m) continue;
            if(!visited[nx][ny]&&arr[nx][ny]==1){
                visited[nx][ny]=true;
                arr[nx][ny]=arr[a][b]+1;
                q.push({nx,ny});
            }
        }
    }
    return;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    
    cin>>n>>m;
    int start_x, start_y;
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin>>arr[i][j];
            if(arr[i][j]==2){
                start_x=i;
                start_y=j;
            }
        }
    }
    
    BFS(start_x,start_y);
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(!visited[i][j]&&arr[i][j]==1) cout<<-1<<" ";
            else cout<<arr[i][j]<<" ";
        }
        cout<<"\n";
    }    
    return 0;
}


#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

//시작 시간 분단위 변환
//시작 시간 기준 정렬
//0번째부터 
//시작 시간이 큐 맨 앞 다르면 playtime--
//있으면 스택에 넣기
//현재 진행 중인 과제 없으면 스택 탑에 있는 내용 처리

struct info{
    string name;
    int startTime;
    int playTime;
};

vector<string> solution(vector<vector<string>> plans) {
    vector<string> answer;
    vector<info> plan;
    //시간 변환
    for(int i=0; i<plans.size();i++){
        string tmp = plans[i][1];
        plan.push_back({plans[i][0],stoi(tmp.substr(0,2))*60+stoi(tmp.substr(3,2)),stoi(plans[i][2])}) ;
    }
 
    sort(plan.begin(), plan.end(),[](info &a, info&b){
       return a.startTime<b.startTime; 
    });
    
    queue<info> q;
    for(int i=0; i<plan.size();i++){
        q.push({plan[i].name,plan[i].startTime,plan[i].playTime});
    }
    
    stack<info> notCompleted;
    int currentTime=q.front().startTime;
    int s=0,t=0;
    string n="";
    
    while(answer.size()!=plan.size()){
        if(currentTime==q.front().startTime){
            notCompleted.push({n,s,t});
            n=q.front().name;
            s=q.front().startTime;
            t=q.front().playTime;
            q.pop();
        }
        t--;
        currentTime++;
        if(t==0){
            answer.push_back(n);
            n=notCompleted.top().name;
            s=notCompleted.top().startTime;
            t=notCompleted.top().playTime;
            notCompleted.pop();
        }
    }
    
    return answer;
}

#include <iostream>
#include <queue>

using namespace std;

bool visited[100001];

int BFS(int start, int end){
    queue<pair<int,int>> q;
    q.push({start,0});
    visited[start]=true;
    while(!q.empty()){
        int x = q.front().first;
        int cnt=q.front().second;
        q.pop();
       
        // 목표 노드에 도달했을 경우 이동 횟수를 반환
        if (x == end) {
            return cnt;
        }

        // 다음 이동 가능한 노드들을 순회
        if (x - 1 >= 0 && !visited[x - 1]) {  // 왼쪽으로 이동
            q.push({x - 1, cnt + 1});
            visited[x - 1] = true;
        }
        if (x + 1 <= 100000 && !visited[x + 1]) {  // 오른쪽으로 이동
            q.push({x + 1, cnt + 1});
            visited[x + 1] = true;
        }
        if (x * 2 <= 100000 && !visited[x * 2]) {  // 2배로 이동
            q.push({x * 2, cnt + 1});
            visited[x * 2] = true;
        }
    }
    return -1;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
   
    int N,K;
    cin>>N>>K;
  
    cout<< BFS(N,K);
    
    return 0;
}

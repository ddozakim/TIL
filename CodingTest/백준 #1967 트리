#include <iostream>
#include <vector>
#include <queue>
#define MAX 100001

using namespace std;

vector<pair<int,int>> tree[MAX];
int farthest_node=0;
bool visited[MAX];
int max_dist=0;

void DFS(int node){
    queue<pair<int,int>> q;
    visited[node]=true;
    q.push({node,0});
    
    while(!q.empty()){
        int now=q.front().first;
        int d=q.front().second;
        q.pop();
        
        if(max_dist<d){
            farthest_node=now;
            max_dist=d;
        }
        
        for(auto edge : tree[now]){
            int next = edge.first;
            int weight = edge.second;
            if(!visited[next]){
                int dist=d+weight;
                visited[next]=true;
                q.push({next,dist});
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int n;
    cin>>n;
    
    for(int i=0; i<n-1;i++){
        int a,b,c;
        cin>>a>>b>>c; // 부모, 자식, 가중치
        tree[a].push_back({b,c});
        tree[b].push_back({a,c});

    }
   
    DFS(1);
    fill(visited,visited+MAX+1,false);
    max_dist=0;
    DFS(farthest_node);
    cout<<max_dist;
    
    return 0;
}

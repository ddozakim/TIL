#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int n;
int m;
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};

int BFS(int x, int y,vector<vector<int> >& maps){ //(0,0) ~ (n-1,m-1)
    queue<pair<int,int>> q;
    q.push({x,y});
    while(!q.empty()){
        int x=q.front().first;
        int y=q.front().second;
        q.pop();
        
        for(int i=0;i<4;i++){
        int nx = x+dx[i];
        int ny = y+dy[i];
            
        if(nx<0||nx>=n||ny<0||ny>=m) continue;
        if(maps[nx][ny]==0) continue;
        if(maps[nx][ny]==1){
           maps[nx][ny]=maps[x][y]+1;
            q.push({nx,ny});
            }
        }
    }
    
    return maps[n-1][m-1] == 1 ? -1 : maps[n-1][m-1];
    
}

int solution(vector<vector<int> > maps)
{
    n= maps.size();
    m= maps[0].size();
    int answer= BFS(0,0,maps);
    return answer;
    
    
}

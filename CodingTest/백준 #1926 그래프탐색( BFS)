#include <iostream>
#include <queue>

using namespace std;

int n,m;
int graph[500][500];
bool visited[500][500];
int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

int bfs(int x,int y){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    int size = 1;
    
    while(!q.empty()){
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        
        for(int i=0; i<4 ;i++){
            int nx = a+dx[i];
            int ny = b+dy[i];
            
            if(nx<0|| ny<0|| nx>=n||ny>=m) continue;
            if(!visited[nx][ny] && graph[nx][ny]==1){
                size++;
                visited[nx][ny]=true;
                q.push({nx,ny});
            }
        }
    }
    return size;
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>n>>m;
    int max_size=0;
    int cnt =0;
    for(int i=0; i<n; i++){
        for(int j=0; j<m;j++){
            cin>>graph[i][j];
        }
    }
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m;j++){
            if(!visited[i][j] && graph[i][j]==1){
                cnt++;
                max_size = max(max_size, bfs(i,j));
            }
        }
    }
    
    cout<<cnt<<"\n"<<max_size;
    
    
    return 0;
}

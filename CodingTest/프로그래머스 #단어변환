#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

bool check(string current, string tmp){
    
    int diff=0;
    for(int i=0; i<current.size();i++){
        if(current[i]!=tmp[i]) diff++;
        if(diff>1) return false;
    }
    
    return diff==1;
}

int bfs(string begin, string target, vector<string>& words){
    queue<pair<string,int>> q;
    vector<bool> visited(words.size(),false);
    q.push({begin,0});
    
    while(!q.empty()){
        string current = q.front().first;
        int count = q.front().second;
        q.pop();
        
        if(current==target) return count;
        
        for(int i=0; i<words.size();i++){
            if(!visited[i] && check(current,words[i])){
                visited[i]=true;
                q.push({words[i],count+1});
            }
        }
    }
    
    return 0;
}

int solution(string begin, string target, vector<string> words) {
    int answer = 0;
    
    if(find(words.begin(),words.end(),target)==words.end()) return 0;
    
    answer = bfs(begin, target, words);
    
    return answer;
}

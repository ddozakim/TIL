#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#define INF 1e9  // 무한대 정의
using namespace std;


int N,M;
vector<pair<int, int>> graph[50001];
int dist[50001];

int dijkstra(int start){
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    pq.push({0,start});
    dist[start]=0;
    while(!pq.empty()){
        int d= pq.top().first;
        int now = pq.top().second;
        pq.pop();
        
        if(now==N) return dist[now];
        if(d>dist[now]) continue;
        
        for(auto edge : graph[now]){
            int next = edge.first;
            int weight = edge.second;
            
            if( dist[next]>dist[now]+weight){
                dist[next]=dist[now]+weight;
                pq.push({dist[next],next});
            }
        }
    }    
    
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>M;
    for(int i=0; i<M;i++){
        int a,b,c;
        cin>>a>>b>>c;
        graph[a].push_back({b,c});
        graph[b].push_back({a,c});
    }
    
    fill(dist,dist+N+1,INF);
    cout<<dijkstra(1);
    
    return 0;
}


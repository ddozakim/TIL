#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
const int INF = 1e9 + 7;

struct Edge {
    int to, cost;
};

int N, P, K;
vector<Edge> graph[1001];

bool canConnect(int maxCost) {
    vector<int> dist(N + 1, INF);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    
    dist[1] = 0;
    pq.push({0, 1});
    
    while (!pq.empty()) {
        auto [usedFree, node] = pq.top();
        pq.pop();
        
        if (dist[node] < usedFree) continue;
        
        for (auto [next, cost] : graph[node]) {
            int newFreeCount = usedFree + (cost > maxCost);
            if (newFreeCount < dist[next]) {
                dist[next] = newFreeCount;
                pq.push({newFreeCount, next});
            }
        }
    }
    
    return dist[N] <= K;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> N >> P >> K;
    for (int i = 0; i < P; i++) {
        int u, v, cost;
        cin >> u >> v >> cost;
        graph[u].push_back({v, cost});
        graph[v].push_back({u, cost});
    }

    int low = 0, high = 1'000'000, result = -1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (canConnect(mid)) {
            result = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    cout << result << '\n';
    return 0;
}

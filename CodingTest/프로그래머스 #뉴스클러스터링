#include <string>
#include <map>
#include <cmath>
using namespace std;

int solution(string str1, string str2) {
    map<string, int> m1, m2;
    int intersection = 0, universal = 0;
    
    // 문자열을 두 글자씩 끊어 맵에 저장
    for (int i = 0; i < str1.size() - 1; i++) {
        if (isalpha(str1[i]) && isalpha(str1[i + 1])) {
            string sub = "";
            sub += tolower(str1[i]);
            sub += tolower(str1[i + 1]);
            m1[sub]++;
        }
    }

    for (int i = 0; i < str2.size() - 1; i++) {
        if (isalpha(str2[i]) && isalpha(str2[i + 1])) {
            string sub = "";
            sub += tolower(str2[i]);
            sub += tolower(str2[i + 1]);
            m2[sub]++;
        }
    }

    // 교집합 및 합집합 계산
    for (auto& p : m1) {
        string sub = p.first;
        int count1 = p.second;
        int count2 = m2[sub];

        intersection += min(count1, count2);
        universal += max(count1, count2);

        m2.erase(sub); // 이미 처리된 항목 제거
    }

    
    for (auto& p : m2) { 
    universal += p.second; 
    }

    // 자카드 유사도 계산
    double jaccard = (universal == 0) ? 1.0 : (double)intersection / universal;
    return floor(jaccard * 65536);
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>
using namespace std;

int N;
int arr[101][101];
bool visited[101][101];

int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

void bfs(int x, int y, int h){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    
    while(!q.empty()){
        int a = q.front().first;
        int b =q.front().second;
        q.pop();
        
        for(int i=0;i<4;i++){
            int nx= a+dx[i];
            int ny = b+dy[i];
            if(nx<0||ny<0||nx>=N||ny>=N) continue;
            if(!visited[nx][ny] && arr[nx][ny] >h){
                visited[nx][ny]=true;
                q.push({nx,ny});
            }
        }
    }
    return;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N;
    int max_height = 0; 
    for(int i=0; i<N;i++){
        for(int j=0; j<N;j++){
            cin>>arr[i][j];
            max_height = max(max_height, arr[i][j]);
        }
    }
    
    int safeArea=0;
    int max_safeArea=0;
    
    for (int h = 0; h <= max_height; h++) {
        memset(visited, false, sizeof(visited));  // 방문 여부 초기화
        safeArea=0;
        // 모든 지점에 대해 안전 영역 탐색
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                // 방문하지 않았고, 현재 높이보다 큰 지점이라면 BFS 수행
                if (!visited[i][j] && arr[i][j] > h) {
                    bfs(i, j, h);
                    safeArea++;  // 하나의 안전 영역 발견
                }
            }
        }

        // 최대 안전 영역 개수 갱신
         max_safeArea = max( max_safeArea, safeArea);
    }
    
    cout<<max_safeArea;
    
    
    return 0;
}


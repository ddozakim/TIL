#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

int n=0;
int arr[26][26];
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
bool visited[26][26]={0,};
vector<int> result;
int cnt=0;

void BFS(int x, int y){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    cnt++;
    
    while(!q.empty()){
        int a=q.front().first;
        int b=q.front().second;
        q.pop();
        
        for(int i=0; i<4;i++){
            int nx= a+dx[i];
            int ny= b+dy[i];
            
            if(nx<0||nx>=n||ny<0||ny>=n) continue;
            if(arr[nx][ny]==0) continue;
            if(visited[nx][ny]==false&&arr[nx][ny]==1){
                visited[nx][ny]=true;
                q.push({nx,ny});
                cnt++;
            }
        }
    }
    
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>n;
    for(int i=0; i<n ;i++){
        for(int j=0;j<n;j++){
            char ch; // 입력이 공백없이 주어질 경우, 문자로 입력받아 변환하거나, 
                    // 각 줄을 문자열 배열s에 입력받아 s[i]형식으로 사용용
            cin>>ch;
            arr[i][j]=ch-'0';
        }
    }
    
     for(int i=0; i<n ;i++){
        for(int j=0;j<n;j++){
            if(arr[i][j]==1&&visited[i][j]==false){
                cnt=0;
                BFS(i,j);
                result.push_back(cnt);
            }
        }
    }
    sort(result.begin(),result.end());
    
    cout<<result.size()<<"\n";
    
    for(int i=0; i<result.size();i++){
        cout<<result[i]<<"\n";
    }
    
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define INF 1e9 

int N,M,K,X;
int dist[3000001];
vector<int> v[3000001];

void dijkstra(int start){
    fill(dist, dist+N+1, INF);
    priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({0,start});
    dist[start]=0;
    
    while(!pq.empty()){
        int d = pq.top().first;
        int now = pq.top().second;
        pq.pop();
        
        if(dist[now]<d) continue;
        for(auto next : v[now]){
            if(dist[next]>dist[now]+1){
                dist[next]=dist[now]+1;
                pq.push({dist[next],next});
            }
        }
    }
}
 
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>M>>K>>X;
    
    for(int i=0; i<M;i++){
        int a,b;
        cin>>a>>b;
        v[a].push_back(b);
    }
    
    dijkstra(X);
    bool hasK = false;
    for(int i=1; i<=N ;i++){
        if(dist[i]==K){
            cout<<i<<"\n";
            hasK=true;
        }
    }
    
    if(!hasK) cout<<-1;
    
    return 0;
}

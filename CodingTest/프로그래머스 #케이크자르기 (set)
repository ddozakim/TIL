#include <string>
#include <vector>
#include <set>

using namespace std;

vector<int> toppingLeft;
vector<int> toppingRight;

set<int> s1, s2;

int solution(vector<int> topping) {
    int answer = 0;
    int size = topping.size();
    
    dp1.assign(size, 0);
    dp2.assign(size, 0);

    
    // 왼쪽에서부터 토핑 종류 개수 저장
    for (int i = 0; i < size; i++) {
        s1.insert(topping[i]);  // 새로운 토핑 추가
        toppingLeft[i] = s1.size();     // 현재까지의 고유 토핑 개수 저장
    }
    
    // 오른쪽에서부터 토핑 종류 개수 저장
    for (int i = size - 1; i >= 0; i--) {
        s2.insert(topping[i]);  // 새로운 토핑 추가
        toppingRight[i] = s2.size();     // 현재까지의 고유 토핑 개수 저장
    }
    
    // 공평하게 나눌 수 있는 경우의 수 계산
    for (int i = 0; i < size - 1; i++) {
        if (toppingLeft[i] == toppingRight[i + 1]) answer++;
    }
    
    return answer;
}

#include <vector>
#include <algorithm>

using namespace std;

int solution(vector<int> sticker) {
    int N = sticker.size();
    if (N == 1) return sticker[0]; // 스티커가 1개일 경우 그대로 반환

    // DP 배열 선언
    vector<int> dp1(N, 0); // 첫 번째 스티커를 선택한 경우
    vector<int> dp2(N, 0); // 첫 번째 스티커를 선택하지 않은 경우

    // 첫 번째 스티커 선택 (마지막 스티커는 선택 불가)
    dp1[0] = sticker[0];
    dp1[1] = sticker[0]; // 두 번째 선택 불가

    // 첫 번째 스티커 미선택 (마지막 스티커 선택 가능)
    dp2[0] = 0;
    dp2[1] = sticker[1];

    // DP 테이블 채우기
    for (int i = 2; i < N; i++) {
        if (i != N - 1) dp1[i] = max(dp1[i - 1], dp1[i - 2] + sticker[i]); // 마지막 선택 X
        dp2[i] = max(dp2[i - 1], dp2[i - 2] + sticker[i]); // 마지막 선택 가능
    }

    // 두 경우 중 최댓값 반환
    return max(dp1[N - 2], dp2[N - 1]);
}

#include <iostream>
#include <vector> 
#include <queue>
#include <algorithm>
using namespace std;

int N,M,V;


void DFS(int x, bool visited[],vector<int> graph[]){
    visited[x]=true;
    cout<<x<<" ";
    for(int i=0; i<graph[x].size();i++){
        int y=graph[x][i];
        if(!visited[y]){
            DFS(y,visited,graph);
        }
    }
}

void BFS(int start,bool visited[],vector<int> graph[]){
  
    queue<int> q;
    q.push(start);
    visited[start]=true;
    
    while(!q.empty()){
        int x=q.front();
        q.pop();
        cout<<x<<" ";
        for(int i=0;i<graph[x].size();i++){
            int y=graph[x][i];
            if(!visited[y]){
                q.push(y);
                visited[y]=true;
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>N>>M>>V;
    bool visited[N+1];
    for(int i=0;i<N+1;i++){
        visited[i]=false;
    }
    vector<int> graph[N+1];
    
    for(int i=0; i<M;i++){
        int sn, cn; //standard node, connected node
        cin>>sn>>cn;
        graph[sn].push_back(cn);
        graph[cn].push_back(sn); // 양방향으로 연결!!
    }
    
    // 각 노드의 인접 리스트를 오름차순으로 정렬->작은 수부터 탐색하도록
    for (int i = 1; i <= N; i++) {
        sort(graph[i].begin(), graph[i].end());
    }
    
    DFS(V,visited,graph);
    cout<<"\n";
    for(int i=0;i<N+1;i++){
        visited[i]=false;
    }
    BFS(V,visited,graph);
    
    return 0;
}

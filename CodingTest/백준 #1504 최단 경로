#include <iostream>
#include <vector> 
#include <queue>

using namespace std;
#define INF 1e9

int N,E;
int v1,v2;
vector<pair<int,int>> graph[801];
int dist[801];

bool dijkstra(int start,int end){
    fill(dist,dist+N+1,INF);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    pq.push({0,start});
    dist[start]=0;
    
    while(!pq.empty()){
        int d = pq.top().first;
        int now = pq.top().second;
        pq.pop();
        
        if(dist[now]<d) continue;
        
        for(auto edge : graph[now]){
            int next = edge.first;
            int cost = edge.second;
            if(dist[next]> dist[now]+cost){
                dist[next] = dist[now]+cost;
                pq.push({dist[next],next});
            }
        }
    }
    if(dist[end]==INF) return false;
    else return true;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>E;
    
    for(int i=0; i<E ;i++){
        int a,b,c;
        cin>>a>>b>>c;
        graph[a].push_back({b,c});
        graph[b].push_back({a,c});
    }
    
    cin>>v1>>v2;
    
    int route1=0; int route2=0;
    
    //1->v1->v2->N
    if(!dijkstra(1,v1)){
        cout<<-1; return 0;
    }
    route1+=dist[v1];
    if(!dijkstra(v1,v2)){
        cout<<-1; return 0;
    }
    route1+=dist[v2];
    if(!dijkstra(v2,N)){
        cout<<-1; return 0;
    }
    route1+=dist[N];

    //1->v2->v1->N
    if(!dijkstra(1,v2)){
        cout<<-1; return 0;
    }
    route2+=dist[v2];
    if(!dijkstra(v2,v1)){
        cout<<-1; return 0;
    }
    route2+=dist[v1];
    if(!dijkstra(v1,N)){
        cout<<-1; return 0;
    }
    route2+=dist[N];
    
   
    int answer = min(route1,route2);
    cout<<answer;
    
   
    return 0;
}

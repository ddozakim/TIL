#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool canPlaceRouter(vector<int>& house, int N, int C, int dist){
    int count =1;
    int last_installed = house[0];
    
    for(int i=1; i<N;i++){
        if(house[i]-last_installed >=dist){
            count++;
            last_installed=house[i];
            
            if(count==C){
                return true;
            }
        }
    }
    
    return false;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
   
    int N, C;
    cin>>N>>C;
    vector<int> house(N);
    
    for(int i=0; i<N;i++){
        cin>>house[i];
    }
    
    sort(house.begin(),house.end());
    
    int left = 1; //최소거리
    int right = house[N-1]-house[0]; //최대거리
    
    int result=0;
    
    while(left<=right){
        int mid = (left+right)/2;
        if(canPlaceRouter(house,N,C,mid)){
            result= mid;
            left = mid+1;
        }
        else{
            right = mid-1;
        }
    }
     cout << result << '\n';
    
    return 0;
}

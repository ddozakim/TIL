#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

#define INF 1e9
using namespace std;

int N,E;
vector<pair<int,int>> graph[200001];
int dist[200001];


void dijkstra(int start){
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    fill(dist, dist + N + 1, INF); 
    dist[start]=0;
    pq.push({0,start});
    
    while(!pq.empty()){
        int d= pq.top().first;
        int now = pq.top().second;
        pq.pop();
        
        if(dist[now]<d) continue;
        
        for(auto edge : graph[now]){
            int next = edge.first;
            int cost = edge.second;
            if(dist[next]>dist[now]+cost){
                dist[next]=dist[now]+cost;
                pq.push({dist[next],next});
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
   
    cin>>N>>E;
    for(int i=0; i<E;i++){
        int a,b,c;
        cin>>a>>b>>c;
        graph[a].push_back({b,c});
        graph[b].push_back({a, c});
    }
    int v1,v2;
    cin>>v1>>v2;
    
  // 1 → v1 → v2 → N 경로 계산
    dijkstra(1);
    int path1 = dist[v1];  // 1에서 v1까지 거리
    if (path1 == INF) {
        cout << -1 << endl;
        return 0;
    }
    
    dijkstra(v1);
    path1 += dist[v2];     // v1에서 v2까지 거리
    if (dist[v2] == INF) {
        cout << -1 << endl;
        return 0;
    }

    dijkstra(v2);
    path1 += dist[N];      // v2에서 N까지 거리
    if (dist[N] == INF) {
        cout << -1 << endl;
        return 0;
    }

    // 1 → v2 → v1 → N 경로 계산
    dijkstra(1);
    int path2 = dist[v2];  // 1에서 v2까지 거리
    if (path2 == INF) {
        cout << -1 << endl;
        return 0;
    }

    dijkstra(v2);
    path2 += dist[v1];     // v2에서 v1까지 거리
    if (dist[v1] == INF) {
        cout << -1 << endl;
        return 0;
    }

    dijkstra(v1);
    path2 += dist[N];      // v1에서 N까지 거리
    if (dist[N] == INF) {
        cout << -1 << endl;
        return 0;
    }

    // 두 경로 중 더 작은 값을 선택
    int result = min(path1, path2);
    cout << result << endl;
    return 0;
}

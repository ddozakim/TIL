#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

vector<int> inorder, postorder;
unordered_map<int, int> in_index;  // 인오더에서 각 값의 위치를 저장

// 프리오더를 구하는 재귀 함수
void get_preorder(int in_start, int in_end, int post_start, int post_end) {
    // 더 이상 구간이 없을 때 종료
    if (in_start > in_end || post_start > post_end) return;

    // 포스트오더의 마지막 원소가 루트 노드
    int root = postorder[post_end];
    cout << root << " ";  // 프리오더이므로 루트 노드를 먼저 출력

    // 인오더에서 루트 노드의 위치를 찾기
    int root_index = in_index[root];
    int left_size = root_index - in_start;  // 왼쪽 서브트리의 크기

    // 왼쪽 서브트리 처리
    get_preorder(in_start, root_index - 1, post_start, post_start + left_size - 1);

    // 오른쪽 서브트리 처리
    get_preorder(root_index + 1, in_end, post_start + left_size, post_end - 1);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;

    inorder.resize(n);
    postorder.resize(n);

    // 인오더 입력 및 인덱스 저장
    for (int i = 0; i < n; ++i) {
        cin >> inorder[i];
        in_index[inorder[i]] = i;
    }

    // 포스트오더 입력
    for (int i = 0; i < n; ++i) {
        cin >> postorder[i];
    }

    // 프리오더 출력 (0부터 n-1 구간 탐색)
    get_preorder(0, n - 1, 0, n - 1);

    return 0;
}

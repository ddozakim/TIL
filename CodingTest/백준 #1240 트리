#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

int N, M;
vector<pair<int,int>> tree[1001];
bool visited[1001];

int bfs(){
    
    int from,to;
    cin>>from>>to;
    
    queue<pair<int,int>> q;
    q.push({from,0});
    visited[from] = true;
    
    while(!q.empty()){
        int now = q.front().first;
        int d = q.front().second;
        q.pop();
        
        if(now==to) return d;
        
        for(int i=0; i< tree[now].size();i++){
            int next = tree[now][i].first;
            int w = tree[now][i].second;
            if(!visited[next]){
                visited[next]=true;
                q.push({next,d+w});
            }
        }
        

    }
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>M;
    for(int i=0 ;i<N-1;i++){
        int a,b,c;
        cin>>a>>b>>c;
        tree[a].push_back({b,c});
        tree[b].push_back({a,c});
    }
    
    while(M--){
        memset(visited,false,sizeof(visited));
        cout<<bfs()<<"\n"; 
    }
    
    
    return 0;
}

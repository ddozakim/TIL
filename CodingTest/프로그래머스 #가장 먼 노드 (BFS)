#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int solution(int n, vector<vector<int>> edge) {
    vector<int> graph[n+1];  // 1-based index로 그래프 표현
    vector<int> distance(n+1, -1);  // 거리 배열 (-1로 초기화)
    queue<int> q;  // BFS를 위한 큐

    // 그래프 초기화
    for (int i = 0; i < edge.size(); i++) {
        graph[edge[i][0]].push_back(edge[i][1]);
        graph[edge[i][1]].push_back(edge[i][0]);
    }

    // BFS 시작 (노드 1에서 출발)
    q.push(1);
    distance[1] = 0;  // 시작점의 거리는 0

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        for (int i = 0; i < graph[current].size(); i++) {
            int next = graph[current][i];

            // 방문하지 않은 노드라면
            if (distance[next] == -1) {
                distance[next] = distance[current] + 1;  // 최단 거리 갱신
                q.push(next);  // 다음 노드를 탐색 대상으로 추가
            }
        }
    }

    // 가장 먼 거리 계산
    int maxDistance = *max_element(distance.begin(), distance.end());

    // 가장 먼 거리에 해당하는 노드의 수 계산
    int answer = count(distance.begin(), distance.end(), maxDistance);

    return answer;
}

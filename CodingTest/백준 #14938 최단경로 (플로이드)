#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
using namespace std;
#define INF 1e9

int n,m,r;
int answer,cnt;
int items[101];
int dist[101][101];

void floyd(){
    for (int k = 1; k <= n; k++){
		for (int i = 1; i <= n; i++){
			for (int j = 1; j <= n; j++)
			{
				if (dist[i][k] + dist[k][j] < dist[i][j])
					dist[i][j] = dist[i][k] + dist[k][j];
			}
		}
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin>>n>>m>>r;
    
    for (int i = 1; i <= n; i++){
		for (int j = 1; j <= n; j++)
		{
			if (i != j) dist[i][j] = INF;
		}   
    }
    
    for(int i=1; i<=n ;i++){
        cin>>items[i];
    }
    
    for(int i=0; i<r; i++){
        int a,b,l;
        cin>>a>>b>>l;
        dist[a][b] = l;
		dist[b][a] = l;    
    }
    
    floyd();
    
    for (int i = 1; i <= n; i++)
	{
		cnt = items[i]; // 시작지점 아이템 습득
		for (int j = 0; j <= n; j++)
		{
			// 수색가능 범위 아이템 습득
			if (i != j && dist[i][j] <= m) cnt += items[j];
		}
		answer = max(answer, cnt);
	}
		
	cout << answer;
    
    return 0;
}

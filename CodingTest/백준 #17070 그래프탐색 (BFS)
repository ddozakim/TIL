
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int arr[17][17];
int n;

bool MoveToRight(int x, int y){
    int nx = x;
    int ny = y+1;
    int tmp = arr[nx][ny];
    if(nx>n || ny>n) return false;
    if(arr[nx][ny]==1) return false;
    if(arr[nx][ny]==0) return true;
}

bool MoveToDown(int x, int y){
    int nx = x+1;
    int ny = y;
    if(nx>n || ny>n) return false;
    if(arr[nx][ny]==1) return false;
    if(arr[nx][ny]==0) return true;
}

bool MoveToDiagonal(int x, int y){
    int nx = x+1;
    int ny = y+1;
    if(nx>n || ny>n) return false;
    if(arr[nx][ny]==1 || arr[nx-1][ny]==1 || arr[nx][ny-1]==1) return false;
    if(arr[nx][ny]==0) return true;
}

int bfs(int x, int y){
    queue<pair<pair<int,int>,int>> q; // 좌표, 상태 ( 0: 가로 ,1 :세로 , 2: 대각선)
    q.push({{x,y},0});
    int cnt=0;
    
    while(!q.empty()){
        int a = q.front().first.first;
        int b = q.front().first.second;
        int state = q.front().second;
        q.pop();
        
        if(a==n && b==n) cnt++;
        
        if(state==0){
            if(MoveToRight(a,b)){
                q.push({{a,b+1},0});
            }
            if(MoveToDiagonal(a,b)){
                q.push({{a+1,b+1},2});
            }
            
        }
        else if(state==1){
            if(MoveToDown(a,b)){
                q.push({{a+1,b},1});
            }
            if(MoveToDiagonal(a,b)){
                q.push({{a+1,b+1},2});
            }
        }
        else if(state ==2){
            if(MoveToRight(a,b)){
                q.push({{a,b+1},0});
            }
             if(MoveToDown(a,b)){
                q.push({{a+1,b},1});
            }
            if(MoveToDiagonal(a,b)){
                q.push({{a+1,b+1},2});
            }
        }
        
    }
    return cnt;
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>n;
    for(int i=1; i<=n;i++){
        for(int j=1; j<=n ;j++){
            cin>>arr[i][j];
        }
    }
    
    cout<<bfs(1,2);

    return 0;
}

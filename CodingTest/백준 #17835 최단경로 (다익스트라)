#include <iostream>
#include <vector>
#include <queue>

using namespace std;

#define INF 1e9

int N,M,K;
vector<pair<int,long long>> graph[100001];
long long dist[100001];
priority_queue<pair<long long,int>> pq;
int farthest_city=0;
long long farthest_dist=0;

void solve(){
   
    while(!pq.empty()){
        long long d = -pq.top().first;
        int now = pq.top().second;
        pq.pop();
        
        if(dist[now]<d)continue;
    
        for(auto edge : graph[now]){
            int next = edge.first;
            long long cost = edge.second;
            
            if(dist[next] > d+cost){
                dist[next]=d+cost;
                pq.push({-dist[next],next});
            }
        }
    }
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>M>>K;
    
    for (int i = 1; i <= N; i++) {
		dist[i] = INF;
	}
        
    for(int i=0; i<M;i++){
        int u,v,c; // u,v :도시 c: 거리 
        cin>>u>>v>>c;
        graph[v].push_back({u,c});
    }

    for(int i=0; i<K;i++){
        int k;
        cin>>k;
        dist[k]=0;
        pq.push({0,k});
    }
    
    solve();
    
    for(int i=1;i<=N; i++){
        if((dist[i]>0 && dist[i]!=INF)){
            if(farthest_dist<dist[i]){
                farthest_dist=dist[i];
                farthest_city=i;
            }
        }
    }
    
    cout<<farthest_city<<"\n"<<farthest_dist;
    return 0;
}

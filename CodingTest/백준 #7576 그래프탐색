#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

int tomato[1000][1000];
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
int n,m;

void BFS(queue<pair<int, int>>& q){
    while(!q.empty()){
        int a= q.front().first;
        int b= q.front().second;
        q.pop();
        
        for(int i=0; i<4;i++){
            int nx=a+dx[i];
            int ny=b+dy[i];
            if(nx<0 ||ny<0||nx>=n||ny>=m) continue;
            if(tomato[nx][ny]==0){
                tomato[nx][ny]=tomato[a][b]+1;
                q.push({nx,ny});
            }
        }
            
    }
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    queue<pair<int,int>> q;

    cin>>m>>n;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin >> tomato[i][j];
            if (tomato[i][j] == 1) {
                q.push({i, j});  //처음부터 익은 토마토 넣어주기 
            }
        }
    }
    
   BFS(q);
 
   int max=0;
   bool isDone=true;
   for(int i=0;i<n;i++){
       for(int j=0; j<m;j++){
        if(max<tomato[i][j]) max=tomato[i][j];
        else if(tomato[i][j]==0) {
           isDone=false;
           break;
        }
       }
       
   }
    if(isDone) cout<<max-1;
    else cout<<-1;
    return 0;
}

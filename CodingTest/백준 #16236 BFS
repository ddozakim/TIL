#include <bits/stdc++.h>
using namespace std;
 
int N,L,R;
int arr[50][50];
bool visited[50][50];
vector<pair<int,int>> v; //연합 좌표값 저장
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
int sum =0; // 연합의 인구수 

void bfs(int x, int y){
    
    queue<pair<int,int>> q;
    q.push({x,y});
    v.push_back({x,y});
    sum=arr[x][y];
    visited[x][y]=true;
    
    while(!q.empty()){
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        
        for(int i=0; i<4;i++){
            int nx = a+dx[i];
            int ny = b+dy[i];
            if(nx<0|| ny<0|| nx>=N|| ny>=N|| visited[nx][ny]) continue;
            int diff = abs(arr[a][b]-arr[nx][ny]);
            if(L<=diff && diff<=R){
                sum+=arr[nx][ny];
                v.push_back({nx,ny});
                visited[nx][ny]=true;
                q.push({nx,ny});
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>L>>R;
    
    for(int i=0; i<N;i++){
        for(int j=0; j<N;j++){
            cin>>arr[i][j];
        }
    }
    
    int days=0;
    bool flag=true;
    
    while(flag){
        flag=false;
        for(int i=0; i<N;i++){
            for(int j=0; j<N;j++){
                if(!visited[i][j]){
                    v.clear();
                    bfs(i,j);
                    if(v.size()>=2){
                        flag=true;
                        int u = sum/v.size();
                        for(int i=0; i<v.size();i++){
                            arr[v[i].first][v[i].second]=u;
                        }
                    }
                }
                
            }
        }
        
        
        if(flag) days++;
        memset(visited,false, sizeof(visited));
    }
    cout<<days;
    return 0;
}

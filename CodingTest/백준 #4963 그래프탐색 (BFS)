#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

int t,w,h;
int map[51][51];
bool visited[51][51];
int dx[]={1,-1,0,0,-1,-1,1,1};
int dy[]={0,0,1,-1,-1,1,-1,1};

void bfs(int x, int y){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    
    while(!q.empty()){
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        
        for(int i=0; i<8; i++){
            int nx = a+ dx[i];
            int ny = b+ dy[i];
            
            if(nx<0||ny<0|| nx>=h||ny>=w) continue;
            if(!visited[nx][ny] && map[nx][ny]==1){
                visited[nx][ny]=true;
                q.push({nx,ny});
            }
        }
    }
}


int main() {
    ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	while(1){
	    
	    memset(visited,false,sizeof(visited));
	    int cnt =0;
	    
	    cin>>w>>h;
	    if(w==0 && h==0) break;
	    
	    for(int i=0; i<h;i++){
	        for(int j=0; j<w; j++){
	            cin>>map[i][j];
	        }
	    }
	    
	    for(int i=0; i<h;i++){
	        for(int j=0; j<w; j++){
	            if(!visited[i][j] && map[i][j]==1){
	                bfs(i,j);
	                cnt++;
	            }
	        }
	    }
	    cout<<cnt<<"\n";
	}

    return 0;
}

#include <string>
using namespace std;

bool visited[11][11][4] = {false};

bool check(int x, int y, int nx, int ny, char d) {
    // 방향 인덱스: L=0, R=1, U=2, D=3
    int dir;
    int rev_dir; // 반대 방향

    if (d == 'L') {
        dir = 0; rev_dir = 1;
    } else if (d == 'R') {
        dir = 1; rev_dir = 0;
    } else if (d == 'U') {
        dir = 2; rev_dir = 3;
    } else { // d == 'D'
        dir = 3; rev_dir = 2;
    }

    if (visited[x][y][dir] || visited[nx][ny][rev_dir]) {
        return true;
    } else {
        visited[x][y][dir] = true;
        visited[nx][ny][rev_dir] = true;
        return false;
    }
}

int solution(string dirs) {
    int answer = 0;
    
    int x = 5, y = 5;  // 시작 좌표
    
    for (char d : dirs) {
        int nx = x, ny = y;
        
        if (d == 'L') ny--;
        else if (d == 'R') ny++;
        else if (d == 'U') nx--;
        else if (d == 'D') nx++;

        // 범위 초과 시 이동 무시
        if (nx < 0 || ny < 0 || nx >= 11 || ny >= 11) continue;

        // 새로운 길이면 카운트 증가
        if (!check(x, y, nx, ny, d)) {
            answer++;
        }

        // 좌표 갱신
        x = nx;
        y = ny;
    }

    return answer;
}

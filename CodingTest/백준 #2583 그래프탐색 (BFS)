#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
using namespace std;

int m,n,k;
int map[101][101];
bool visited[101][101];
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
vector<int> answer;


int bfs(int x, int y){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    int size=1;
    while(!q.empty()){
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        
        for(int i=0; i<4; i++){
            int nx = a+ dx[i];
            int ny = b+ dy[i];
            
            if(nx<0||ny<0|| nx>=m||ny>=n) continue;
            if(!visited[nx][ny] && map[nx][ny]==0){
                visited[nx][ny]=true;
                q.push({nx,ny});
                size++;
            }
        }
    }
    return size;
}


int main() {
    ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	cin>>m>>n>>k;
	
	while(k--){
	    
	   int x1,y1,x2,y2;
	   cin>>x1>>y1>>x2>>y2;
	   
	   for(int i=y1; i<y2; i++){
	       for(int j=x1; j<x2 ;j++){
	           map[i][j]=1;
	       }
	   }
	   
	}
	int cnt =0;
	for(int i=0; i<m;i++){
	    for(int j=0; j<n;j++){
	        if(!visited[i][j]&&map[i][j]==0){
	            int size = bfs(i,j);
	            answer.push_back(size);
	            cnt++;
	        }
	    }
	}
    sort(answer.begin(),answer.end());
    cout<<cnt<<"\n";
    for(auto x : answer){
        cout<<x<<" ";
    }
    
    return 0;
}

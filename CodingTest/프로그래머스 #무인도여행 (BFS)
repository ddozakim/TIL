#include <string>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n,m;
char arr[100][100];
bool visited[100][100];
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
bool hasIsland = false;

int bfs(int x, int y){
    queue<pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    int total = arr[x][y]-'0';
    
    while(!q.empty()){
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        
        for(int i=0; i<4; i++){
            int nx = a+dx[i];
            int ny = b+dy[i];
            
            if(nx<0||ny<0||nx>=n ||ny>=m || arr[nx][ny] =='X') continue;
            if(!visited[nx][ny]){
                visited[nx][ny]=true;
                total+=arr[nx][ny]-'0';
                q.push({nx,ny});
            }
        }
    }
    return total;
}

vector<int> solution(vector<string> maps) {
    vector<int> answer;
    n = maps.size();
    m = maps[0].size();
    
    for(int i=0; i<n;i++){
        string str = maps[i];
        for(int j=0; j<m;j++){
            arr[i][j] =str[j];
        }
    }
   
    for(int i=0; i<n;i++){
        for(int j=0; j<m; j++){
            if(!visited[i][j] && arr[i][j]!='X'){
                hasIsland = true;
                int days = bfs(i,j);
                answer.push_back(days);
            }
        }
    }
    sort(answer.begin(), answer.end());
    
    if(!hasIsland){
        answer.push_back(-1);
    }
  
    return answer;
}

#include <iostream>
#include <queue>

using namespace std;

int n,m;
string graph[100];
bool visited[100][100];
int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

int bfs(int x,int y){
    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> q;
    q.push({0,{x,y}});
    int min_cnt = 1e9;
    visited[x][y]=true;
    
    while(!q.empty()){
        int a = q.top().second.first;
        int b = q.top().second.second;
        int cnt = q.top().first;
        q.pop();
        
        if(a==m-1 && b== n-1) {
            min_cnt=min(min_cnt,cnt);
            continue;
        }
        
        for(int i=0; i<4 ;i++){
            int nx = a+dx[i];
            int ny = b+dy[i];
            
            if(nx<0|| ny<0|| nx>=m||ny>=n) continue;
            if(!visited[nx][ny] && graph[nx][ny]=='1'){
                visited[nx][ny] = true;
                q.push({cnt+1,{nx,ny}});
            }
            else if(!visited[nx][ny] && graph[nx][ny]=='0'){
                visited[nx][ny] = true;
                q.push({cnt,{nx,ny}});
            }
        }
    }
    return min_cnt;
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>n>>m;
    
    for(int i=0; i<m; i++){
        cin>>graph[i];
    }
    
    
    cout<<bfs(0,0);
    
    
    return 0;
}

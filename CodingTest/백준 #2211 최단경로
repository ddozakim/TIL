#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

#define INF 1e9

int N, M;
int dist[1001];
int parent[1001];
vector<pair<int, int>> network[1001];

void dijkstra(int start) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});
    dist[start] = 0;
    parent[start] = -1; // 시작점의 부모는 없음

    while (!pq.empty()) {
        int t = pq.top().first;
        int now = pq.top().second;
        pq.pop();

        if (dist[now] < t) continue;

        for (auto edge : network[now]) {
            int next = edge.first;
            int cost = edge.second;
            if (dist[next] > dist[now] + cost) {
                dist[next] = dist[now] + cost;
                parent[next] = now; // 최단 거리 경로로 갱신된 경우, 부모 노드 저장
                pq.push({dist[next], next});
            }
        }
    }
}

void recover_connections() {
    vector<pair<int, int>> connections;
    for (int i = 2; i <= N; i++) { // 노드 2부터 N까지 부모를 확인
        if (parent[i] != -1) {
            connections.push_back({parent[i], i}); // 복구해야 할 회선을 저장
        }
    }

    cout << connections.size() << '\n'; // 복구해야 할 회선의 개수 출력
    for (auto conn : connections) {
        cout << conn.first << " " << conn.second << '\n'; // 각 회선을 출력
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> N >> M;

    fill(dist, dist + N + 1, INF);

    for (int i = 0; i < M; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        network[a].push_back({b, c});
        network[b].push_back({a, c});
    }

    dijkstra(1); // 1번 노드에서 시작
    recover_connections(); // 복구할 회선 출력

    return 0;
}

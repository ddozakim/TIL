#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

int N,M;
int arr[500][500];
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
bool visited[500][500];
int answer;

void dfs(int x, int y, int cnt, int sum){
    
    if(cnt==4){
        answer=max(answer,sum);
        return;
    }
    
   if(!visited[y][x]){
        sum += arr[y][x];
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(nx < 0 || nx >= M || ny < 0 || ny >= N) continue;

            visited[y][x] = true;
            dfs(nx, ny, cnt + 1, sum);
            visited[y][x] = false;
        }
    }
    
    //ㅓ
    if(x - 1 >= 0 && y - 1 >= 0 && y + 1 < N)
        answer = max(answer, arr[y][x-1] + arr[y-1][x] + arr[y][x] + arr[y+1][x]);
    // ㅏ
    if(x + 1 < M && y - 1 >= 0 && y + 1 < N)
        answer = max(answer, arr[y][x+1] + arr[y-1][x] + arr[y][x] + arr[y+1][x]);
    // ㅗ
    if(x - 1 >= 0 && y - 1 >= 0 && x + 1 < M)
        answer = max(answer, arr[y][x-1] + arr[y-1][x] + arr[y][x] + arr[y][x+1]);
    // ㅜ
    if(x - 1 >= 0 && y + 1 < N && x + 1 < M)
        answer = max(answer, arr[y][x-1] + arr[y+1][x] + arr[y][x] + arr[y][x+1]);
    
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin>>N>>M;
    
    for(int i=0; i<N;i++){
        for(int j=0; j<M;j++){
            cin>>arr[i][j];
        }    
    }
    for(int i=0; i<N;i++){
        for(int j=0; j<M;j++){
            dfs(i,j,0,0);
        }    
    }
    cout<<answer;
    
    return 0;
}

#include <vector>
#include <algorithm>

using namespace std;

vector<int> parent;  // 부모 노드를 저장하는 배열

// Find 함수: 부모 찾기
int find(int x) {
    if (parent[x] == x) return x;
    return parent[x] = find(parent[x]);  // 경로 압축 기법
}

// Union 함수: 두 집합을 합치는 연산
void unionNodes(int a, int b) {
    int rootA = find(a);
    int rootB = find(b);
    if (rootA != rootB) parent[rootB] = rootA;  // 두 집합을 합침
}


int solution(int n, vector<vector<int>> costs) {
    // 부모 배열 초기화 (자기 자신을 부모로 설정)
    parent.resize(n);
    for (int i = 0; i < n; i++) {
        parent[i] = i;
    }

    // 1. 간선을 가중치(비용) 기준으로 정렬
    sort(costs.begin(), costs.end(), [](vector<int> &a, vector<int> &b) {
        return a[2] < b[2];  // 비용 기준 오름차순 정렬
    });

    int totalCost = 0;  // 최소 비용
    int edgeCount = 0;  // 연결된 간선 수

    for (auto &cost : costs) {
        int u = cost[0], v = cost[1], weight = cost[2];

        if (find(u) != find(v)) {  // 사이클이 발생하지 않으면 선택
            unionNodes(u, v);
            totalCost += weight;
            edgeCount++;

            if (edgeCount == n - 1) break;  // MST가 완성되면 종료
        }
    }

    return totalCost;
}

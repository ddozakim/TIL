#include <iostream>
#include <vector>
#define INF 1e9  // 무한대 값 설정 (도달할 수 없는 경우)

using namespace std;

int n, m;  // n: 도시 수, m: 버스 수
int dist[101][101];  // 최단 거리 저장 배열

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m;

    // 거리 배열 초기화 (자기 자신까지의 거리는 0, 나머지는 INF)
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i == j) dist[i][j] = 0;
            else dist[i][j] = INF;
        }
    }

    // 간선 정보 입력받기
    for (int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        // 시작 도시 a에서 도착 도시 b까지의 비용이 c
        // 기존 값보다 작은 비용이 있을 경우만 갱신
        if (dist[a][b] > c) dist[a][b] = c;
    }

    // 플로이드-워셜 알고리즘 수행
    for (int k = 1; k <= n; k++) {        // 경유지
        for (int i = 1; i <= n; i++) {    // 출발지
            for (int j = 1; j <= n; j++) { // 도착지
                if (dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // 결과 출력
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            // 갈 수 없는 경우 0 출력
            if (dist[i][j] == INF) cout << 0 << " ";
            else cout << dist[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}
